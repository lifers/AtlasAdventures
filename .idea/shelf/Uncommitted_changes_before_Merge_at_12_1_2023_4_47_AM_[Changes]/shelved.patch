Index: src/data_access/FileUserDataAccessObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\r\n\r\nimport entity.Profile;\r\nimport use_case.profile.ProfileDataAccessInterface;\r\nimport use_case.profile.ProfileInputBoundary;\r\n\r\nimport java.io.*;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.Map;\r\n\r\npublic class FileUserDataAccessObject implements ProfileDataAccessInterface {\r\n\r\n    private final File csvFile;\r\n\r\n    private final Map<String, Integer> headers = new LinkedHashMap<>();\r\n\r\n    private Profile profile = new Profile(0, 0);\r\n\r\n    public FileUserDataAccessObject(String csvPath) throws IOException {\r\n\r\n\r\n        csvFile = new File(csvPath);\r\n        headers.put(\"GAMES_PLAYED\", 0);\r\n        headers.put(\"AVERAGE_SCORE\", 1);\r\n\r\n        if (csvFile.length() == 0) {\r\n            save();\r\n        } else {\r\n\r\n            try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {\r\n                String header = reader.readLine();\r\n\r\n                // For later: clean this up by creating a new Exception subclass and handling it in the UI.\r\n                assert header.equals(\"GAMES_PLAYED,AVERAGE_SCORE\");\r\n\r\n                String row = reader.readLine();\r\n\r\n                String[] col = row.split(\",\");\r\n                int gamesPlayed = Integer.parseInt(col[headers.get(\"GAMES_PLAYED\")]);\r\n                double score = Double.parseDouble(col[headers.get(\"AVERAGE_SCORE\")]);\r\n\r\n                this.profile.setAverage_score(score);\r\n                this.profile.setGames_played(gamesPlayed);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void update() throws IOException {\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {\r\n            String header = reader.readLine();\r\n\r\n            // For later: clean this up by creating a new Exception subclass and handling it in the UI.\r\n            assert header.equals(\"GAMES_PLAYED,AVERAGE_SCORE\");\r\n\r\n            String row = reader.readLine();\r\n\r\n            String[] col = row.split(\",\");\r\n            int gamesPlayed = Integer.parseInt(col[headers.get(\"GAMES_PLAYED\")]);\r\n            double score = Double.parseDouble(col[headers.get(\"AVERAGE_SCORE\")]);\r\n\r\n            this.profile.setAverage_score(score);\r\n            this.profile.setGames_played(gamesPlayed);\r\n        }\r\n    }\r\n    private void save() {\r\n        BufferedWriter writer;\r\n        try {\r\n            writer = new BufferedWriter(new FileWriter(csvFile));\r\n            writer.write(String.join(\",\", headers.keySet()));\r\n            writer.newLine();\r\n\r\n            String line = String.valueOf((int) this.profile.getGames_played()) + \",\" + String.valueOf(this.profile.getAverage_score());\r\n            writer.write(line);\r\n            writer.close();\r\n\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setGamesPlayed(int gamesPlayed) {\r\n        this.profile.setGames_played(gamesPlayed);\r\n    }\r\n\r\n    @Override\r\n    public void setAverageScore(Double score) {\r\n        this.profile.setAverage_score(score);\r\n    }\r\n\r\n    @Override\r\n    public int getGamesPlayed() {\r\n        return (int) this.profile.getGames_played();\r\n    }\r\n\r\n    @Override\r\n    public Double getAverageScore() {\r\n        return this.profile.getAverage_score();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data_access/FileUserDataAccessObject.java b/src/data_access/FileUserDataAccessObject.java
--- a/src/data_access/FileUserDataAccessObject.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/data_access/FileUserDataAccessObject.java	(date 1701423993894)
@@ -21,41 +21,38 @@
 
     public FileUserDataAccessObject(String csvPath) throws IOException {
 
-
         csvFile = new File(csvPath);
         headers.put("GAMES_PLAYED", 0);
         headers.put("AVERAGE_SCORE", 1);
+        headers.put("UID", 2);
 
         if (csvFile.length() == 0) {
             save();
         } else {
-
             try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
                 String header = reader.readLine();
 
                 // For later: clean this up by creating a new Exception subclass and handling it in the UI.
-                assert header.equals("GAMES_PLAYED,AVERAGE_SCORE");
+                assert header.equals("GAMES_PLAYED,AVERAGE_SCORE,UID");
 
                 String row = reader.readLine();
 
                 String[] col = row.split(",");
                 int gamesPlayed = Integer.parseInt(col[headers.get("GAMES_PLAYED")]);
                 double score = Double.parseDouble(col[headers.get("AVERAGE_SCORE")]);
-
-                this.profile.setAverage_score(score);
-                this.profile.setGames_played(gamesPlayed);
+                int uid = Integer.parseInt(col[headers.get("UID")]);
 
+                this.profile = new Profile(uid, score, gamesPlayed);
             }
         }
     }
-
 
     public void update() throws IOException {
         try (BufferedReader reader = new BufferedReader(new FileReader(csvFile))) {
             String header = reader.readLine();
 
             // For later: clean this up by creating a new Exception subclass and handling it in the UI.
-            assert header.equals("GAMES_PLAYED,AVERAGE_SCORE");
+            assert header.equals("GAMES_PLAYED,AVERAGE_SCORE,UID");
 
             String row = reader.readLine();
 
@@ -74,7 +71,7 @@
             writer.write(String.join(",", headers.keySet()));
             writer.newLine();
 
-            String line = String.valueOf((int) this.profile.getGames_played()) + "," + String.valueOf(this.profile.getAverage_score());
+            String line = this.profile.getGames_played() + "," + this.profile.getAverage_score() + "," + this.profile.getUid();
             writer.write(line);
             writer.close();
 
@@ -102,4 +99,9 @@
     public Double getAverageScore() {
         return this.profile.getAverage_score();
     }
+
+    @Override
+    public int getUid() {
+        return this.profile.getUid();
+    }
 }
Index: src/use_case/leaderboard/LeaderboardDataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.leaderboard;\r\n\r\nimport entity.Profile;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic interface LeaderboardDataAccessInterface {\r\n    public ArrayList<Profile> getLeaderboard();\r\n\r\n    public void addProfile(Profile profile);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/leaderboard/LeaderboardDataAccessInterface.java b/src/use_case/leaderboard/LeaderboardDataAccessInterface.java
--- a/src/use_case/leaderboard/LeaderboardDataAccessInterface.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/use_case/leaderboard/LeaderboardDataAccessInterface.java	(date 1701403818422)
@@ -7,5 +7,9 @@
 public interface LeaderboardDataAccessInterface {
     public ArrayList<Profile> getLeaderboard();
 
+    public boolean uidExists(int uid);
+
+    public void updateProfile(Profile profile);
+
     public void addProfile(Profile profile);
 }
Index: src/use_case/leaderboard/LeaderboardInteractor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.leaderboard;\r\n\r\nimport entity.Profile;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class LeaderboardInteractor implements LeaderboardInputBoundary {\r\n    final LeaderboardOutputBoundary leaderboardPresenter;\r\n    final LeaderboardDataAccessInterface leaderboardDAO;\r\n\r\n    public LeaderboardInteractor(LeaderboardOutputBoundary leaderboardPresenter,\r\n                                 LeaderboardDataAccessInterface leaderboardDAO) {\r\n        this.leaderboardPresenter = leaderboardPresenter;\r\n        this.leaderboardDAO = leaderboardDAO;\r\n    }\r\n\r\n    @Override\r\n    public void execute() {\r\n        ArrayList<Profile> leaderboardProfiles = leaderboardDAO.getLeaderboard();\r\n        if (leaderboardProfiles.isEmpty()) {\r\n            leaderboardPresenter.prepareFailView();\r\n        } else {\r\n            leaderboardPresenter.prepareSuccessView(leaderboardProfiles);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/leaderboard/LeaderboardInteractor.java b/src/use_case/leaderboard/LeaderboardInteractor.java
--- a/src/use_case/leaderboard/LeaderboardInteractor.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/use_case/leaderboard/LeaderboardInteractor.java	(date 1701403818444)
@@ -1,21 +1,33 @@
 package use_case.leaderboard;
 
 import entity.Profile;
+import use_case.profile.ProfileDataAccessInterface;
 
 import java.util.ArrayList;
 
 public class LeaderboardInteractor implements LeaderboardInputBoundary {
     final LeaderboardOutputBoundary leaderboardPresenter;
     final LeaderboardDataAccessInterface leaderboardDAO;
+    final ProfileDataAccessInterface profileDAO;
 
     public LeaderboardInteractor(LeaderboardOutputBoundary leaderboardPresenter,
-                                 LeaderboardDataAccessInterface leaderboardDAO) {
+                                 LeaderboardDataAccessInterface leaderboardDAO,
+                                 ProfileDataAccessInterface profileDAO) {
         this.leaderboardPresenter = leaderboardPresenter;
         this.leaderboardDAO = leaderboardDAO;
+        this.profileDAO = profileDAO;
     }
 
     @Override
     public void execute() {
+        Profile profile = new Profile(profileDAO.getUid(), profileDAO.getAverageScore(), profileDAO.getGamesPlayed());
+        if (profile.getUid() != 0) {
+            if (leaderboardDAO.uidExists(profile.getUid())) {
+                leaderboardDAO.updateProfile(profile);
+            } else {
+                leaderboardDAO.addProfile(profile);
+            }
+        }
         ArrayList<Profile> leaderboardProfiles = leaderboardDAO.getLeaderboard();
         if (leaderboardProfiles.isEmpty()) {
             leaderboardPresenter.prepareFailView();
Index: src/use_case/profile/ProfileDataAccessInterface.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.profile;\r\n\r\nimport entity.Profile;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\npublic interface ProfileDataAccessInterface {\r\n    public void setGamesPlayed(int gamesPlayed);\r\n\r\n    public void setAverageScore(Double score);\r\n\r\n    public int getGamesPlayed();\r\n\r\n    public Double getAverageScore();\r\n\r\n    public void update() throws IOException;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/use_case/profile/ProfileDataAccessInterface.java b/src/use_case/profile/ProfileDataAccessInterface.java
--- a/src/use_case/profile/ProfileDataAccessInterface.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/use_case/profile/ProfileDataAccessInterface.java	(date 1701423993883)
@@ -15,4 +15,5 @@
     public Double getAverageScore();
 
     public void update() throws IOException;
+    public int getUid();
 }
Index: src/app/MainMenuFactory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package app;\r\n\r\nimport interface_adapter.answer_question.AnswerQuestionViewModel;\r\nimport interface_adapter.ViewManagerModel;\r\nimport interface_adapter.leaderboard.LeaderboardController;\r\nimport interface_adapter.leaderboard.LeaderboardPresenter;\r\nimport interface_adapter.leaderboard.LeaderboardViewModel;\r\nimport interface_adapter.profile.ProfileController;\r\nimport interface_adapter.profile.ProfilePresenter;\r\nimport interface_adapter.profile.ProfileViewModel;\r\nimport interface_adapter.start_sp_quiz.SPQuizController;\r\nimport interface_adapter.start_sp_quiz.SPQuizPresenter;\r\nimport interface_adapter.start_sp_quiz.SPQuizViewModel;\r\nimport use_case.leaderboard.LeaderboardDataAccessInterface;\r\nimport use_case.leaderboard.LeaderboardInputBoundary;\r\nimport use_case.leaderboard.LeaderboardInteractor;\r\nimport use_case.leaderboard.LeaderboardOutputBoundary;\r\nimport use_case.profile.ProfileDataAccessInterface;\r\nimport use_case.profile.ProfileInputBoundary;\r\nimport use_case.profile.ProfileInteractor;\r\nimport use_case.start_sp_quiz.SPQuizDataAccessInterface;\r\nimport use_case.start_sp_quiz.SPQuizInputBoundary;\r\nimport use_case.start_sp_quiz.SPQuizInteractor;\r\nimport use_case.start_sp_quiz.SPQuizOutputBoundary;\r\nimport view.MainMenuView;\r\n\r\npublic class MainMenuFactory {\r\n    private MainMenuFactory() {}\r\n\r\n    public static MainMenuView create(\r\n            ViewManagerModel viewManagerModel,\r\n            SPQuizViewModel spQuizViewModel,\r\n            SPQuizDataAccessInterface spQuizDAO,\r\n            AnswerQuestionViewModel answerQuestionViewModel,\r\n            ProfileViewModel profileViewModel,\r\n            ProfileDataAccessInterface profileDAO,\r\n            LeaderboardViewModel leaderboardViewModel,\r\n            LeaderboardDataAccessInterface leaderboardDAO) {\r\n\r\n        SPQuizController spQuizController = createSPQuizUseCase(viewManagerModel, spQuizViewModel, answerQuestionViewModel, spQuizDAO);\r\n        ProfileController profileController = createProfileUseCase(viewManagerModel, profileViewModel, profileDAO);\r\n        LeaderboardController leaderboardController = createLeaderboardUseCase(viewManagerModel, leaderboardViewModel, leaderboardDAO);\r\n        return new MainMenuView(\r\n                spQuizController, spQuizViewModel,\r\n                leaderboardController, leaderboardViewModel,\r\n                profileViewModel, profileController);\r\n    }\r\n\r\n    private static SPQuizController createSPQuizUseCase(ViewManagerModel viewManagerModel,\r\n                                                        SPQuizViewModel spQuizViewModel,\r\n                                                        AnswerQuestionViewModel questionViewModel,\r\n                                                        SPQuizDataAccessInterface spQuizDAO) {\r\n        SPQuizOutputBoundary spQuizPresenter = new SPQuizPresenter(viewManagerModel, spQuizViewModel, questionViewModel);\r\n\r\n        SPQuizInputBoundary spQuizInteractor = new SPQuizInteractor(spQuizDAO, spQuizPresenter);\r\n\r\n        return new SPQuizController(spQuizInteractor);\r\n    }\r\n\r\n    private static ProfileController createProfileUseCase(ViewManagerModel viewManagerModel,\r\n                                                          ProfileViewModel profileViewModel,\r\n                                                          ProfileDataAccessInterface DAO) {\r\n        ProfilePresenter profilePresenter = new ProfilePresenter(profileViewModel, viewManagerModel);\r\n\r\n        ProfileInputBoundary profileInteractor = new ProfileInteractor(profilePresenter, DAO);\r\n\r\n        return new ProfileController(profileInteractor);\r\n\r\n    }\r\n\r\n    private static LeaderboardController createLeaderboardUseCase(ViewManagerModel viewManagerModel,\r\n                                                                  LeaderboardViewModel leaderboardViewModel,\r\n                                                                  LeaderboardDataAccessInterface leaderboardDAO) {\r\n        LeaderboardOutputBoundary leaderboardPresenter = new LeaderboardPresenter(viewManagerModel, leaderboardViewModel);\r\n\r\n        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(leaderboardPresenter, leaderboardDAO);\r\n\r\n        return new LeaderboardController(leaderboardInteractor);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/app/MainMenuFactory.java b/src/app/MainMenuFactory.java
--- a/src/app/MainMenuFactory.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/app/MainMenuFactory.java	(date 1701403818485)
@@ -39,7 +39,7 @@
 
         SPQuizController spQuizController = createSPQuizUseCase(viewManagerModel, spQuizViewModel, answerQuestionViewModel, spQuizDAO);
         ProfileController profileController = createProfileUseCase(viewManagerModel, profileViewModel, profileDAO);
-        LeaderboardController leaderboardController = createLeaderboardUseCase(viewManagerModel, leaderboardViewModel, leaderboardDAO);
+        LeaderboardController leaderboardController = createLeaderboardUseCase(viewManagerModel, leaderboardViewModel, leaderboardDAO, profileDAO);
         return new MainMenuView(
                 spQuizController, spQuizViewModel,
                 leaderboardController, leaderboardViewModel,
@@ -70,10 +70,11 @@
 
     private static LeaderboardController createLeaderboardUseCase(ViewManagerModel viewManagerModel,
                                                                   LeaderboardViewModel leaderboardViewModel,
-                                                                  LeaderboardDataAccessInterface leaderboardDAO) {
+                                                                  LeaderboardDataAccessInterface leaderboardDAO,
+                                                                  ProfileDataAccessInterface profileDAO) {
         LeaderboardOutputBoundary leaderboardPresenter = new LeaderboardPresenter(viewManagerModel, leaderboardViewModel);
 
-        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(leaderboardPresenter, leaderboardDAO);
+        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(leaderboardPresenter, leaderboardDAO, profileDAO);
 
         return new LeaderboardController(leaderboardInteractor);
     }
Index: src/data_access/MongoDBDataAccessObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\r\nimport com.mongodb.client.MongoClients;\r\nimport com.mongodb.client.MongoClient;\r\nimport com.mongodb.client.MongoDatabase;\r\nimport com.mongodb.client.MongoCollection;\r\nimport entity.Profile;\r\nimport org.bson.Document;\r\nimport use_case.leaderboard.LeaderboardDataAccessInterface;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.LinkedHashMap;\r\n\r\npublic class MongoDBDataAccessObject implements LeaderboardDataAccessInterface {\r\n    private final MongoClient mongoClient;\r\n    private final MongoDatabase database;\r\n    private final MongoCollection<Document> collection;\r\n    private final Comparator<Profile> profileComparator;\r\n\r\n    public MongoDBDataAccessObject(String connectionString, String databaseName, String collectionName) {\r\n        this.mongoClient = MongoClients.create(connectionString);\r\n        this.database = mongoClient.getDatabase(databaseName);\r\n        this.collection = database.getCollection(collectionName);\r\n        this.profileComparator = new Comparator<Profile>() {\r\n            // Sorts in descending order\r\n            @Override\r\n            public int compare(Profile p1, Profile p2) {\r\n                if(p1.getAverage_score() < p2.getAverage_score()) {\r\n                    return 1;\r\n                } else if (p1.getAverage_score() > p2.getAverage_score()) {\r\n                    return -1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    private void insertDocument(Document document) {\r\n        try {\r\n            collection.insertOne(document);\r\n            System.out.println(\"Document inserted successfully!\");\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error inserting document: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void clearCollection() {\r\n        try {\r\n            collection.deleteMany(new Document());\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error clearing collection: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void close() {\r\n        try {\r\n            mongoClient.close();\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error closing connection: \" + e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public ArrayList<Profile> getLeaderboard() {\r\n        try {\r\n            ArrayList<Profile> leaderboard = new ArrayList<>();\r\n            collection.find()\r\n                    .sort(new Document(\"avgScore\", -1))\r\n                    .limit(10)\r\n                    .forEach(doc -> {\r\n                        double avgScore = doc.getDouble(\"avgScore\");\r\n                        int gamesPlayed = doc.getInteger(\"gamesPlayed\");\r\n                        leaderboard.add(new Profile(avgScore, gamesPlayed));\r\n                    });\r\n            leaderboard.sort(profileComparator);\r\n            return leaderboard;\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error finding documents: \" + e.getMessage());\r\n            return new ArrayList<>();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void addProfile(Profile profile) {\r\n        LinkedHashMap<String, Object> profileDict = new LinkedHashMap<>();\r\n        Document profileDoc = new Document();\r\n        profileDoc.append(\"avgScore\", profile.getAverage_score());\r\n        profileDoc.append(\"gamesPlayed\", profile.getGames_played());\r\n        insertDocument(profileDoc);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data_access/MongoDBDataAccessObject.java b/src/data_access/MongoDBDataAccessObject.java
--- a/src/data_access/MongoDBDataAccessObject.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/src/data_access/MongoDBDataAccessObject.java	(date 1701403818433)
@@ -3,14 +3,21 @@
 import com.mongodb.client.MongoClient;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.MongoCollection;
+import com.mongodb.client.model.UpdateOptions;
+import com.mongodb.client.model.Updates;
+import com.mongodb.client.result.UpdateResult;
 import entity.Profile;
 import org.bson.Document;
+import org.bson.conversions.Bson;
 import use_case.leaderboard.LeaderboardDataAccessInterface;
 
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.LinkedHashMap;
 
+import static com.mongodb.client.model.Updates.combine;
+import static java.lang.reflect.Array.set;
+
 public class MongoDBDataAccessObject implements LeaderboardDataAccessInterface {
     private final MongoClient mongoClient;
     private final MongoDatabase database;
@@ -63,15 +70,16 @@
 
     @Override
     public ArrayList<Profile> getLeaderboard() {
-        try {
-            ArrayList<Profile> leaderboard = new ArrayList<>();
+        ArrayList<Profile> leaderboard = new ArrayList<>();
+        try {
             collection.find()
                     .sort(new Document("avgScore", -1))
                     .limit(10)
                     .forEach(doc -> {
+                        int uid = doc.getInteger("uid");
                         double avgScore = doc.getDouble("avgScore");
                         int gamesPlayed = doc.getInteger("gamesPlayed");
-                        leaderboard.add(new Profile(avgScore, gamesPlayed));
+                        leaderboard.add(new Profile(uid, avgScore, gamesPlayed));
                     });
             leaderboard.sort(profileComparator);
             return leaderboard;
@@ -81,10 +89,41 @@
         }
     }
 
+    @Override
+    public boolean uidExists(int uid) {
+        try {
+            Document doc = collection.find(new Document("uid", uid)).first();
+            if (doc != null) {
+                return true;
+            } else {
+                return false;
+            }
+        } catch (Exception e) {
+            System.err.println("Error accessing database :" + e.getMessage());
+            return false;
+        }
+    }
+
+    @Override
+    public void updateProfile(Profile profile) {
+        Document query = new Document("uid", profile.getUid());
+        Bson updates = Updates.combine(
+                Updates.set("avgScore", profile.getAverage_score()),
+                Updates.set("gamesPlayed", profile.getGames_played())
+        );
+        UpdateOptions options = new UpdateOptions().upsert(true);
+        try {
+            collection.updateOne(query, updates, options);
+        } catch (Exception e) {
+            System.err.println("Error updating document: " + e.getMessage());
+        }
+    }
+
     @Override
     public void addProfile(Profile profile) {
         LinkedHashMap<String, Object> profileDict = new LinkedHashMap<>();
         Document profileDoc = new Document();
+        profileDoc.append("uid", profile.getUid());
         profileDoc.append("avgScore", profile.getAverage_score());
         profileDoc.append("gamesPlayed", profile.getGames_played());
         insertDocument(profileDoc);
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_20\" project-jdk-name=\"openjdk-20\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/.idea/misc.xml	(date 1701403818501)
@@ -8,7 +8,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="openjdk-20" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: test/data_access/MongoDBDataAccessObjectTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package data_access;\r\n\r\nimport entity.Profile;\r\nimport org.junit.jupiter.api.AfterEach;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.ArrayList;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass MongoDBDataAccessObjectTest {\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        MongoDBDataAccessObject dao = new MongoDBDataAccessObject(\r\n                \"mongodb://localhost:27017\",\r\n                \"atlas-adventures-leaderbaord\",\r\n                \"test-leaderboard\");\r\n        dao.clearCollection();\r\n        dao.close();\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() {}\r\n\r\n    @Test\r\n    void generalTest() {\r\n        // Ensures that a) profiles are inserted, b) returned leaderboard is sorted and smaller than 10\r\n        MongoDBDataAccessObject dao = new MongoDBDataAccessObject(\r\n                \"mongodb://localhost:27017\",\r\n                \"atlas-adventures-leaderbaord\",\r\n                \"test-leaderboard\");\r\n        dao.addProfile(new Profile(6, 10));\r\n        dao.addProfile(new Profile(2, 13));\r\n        assertEquals(dao.getLeaderboard().size(), 2);\r\n        ArrayList<Profile> correctLeaderboard = new ArrayList<>();\r\n        for (int i=10; i > 0; i--) {\r\n            Profile p = new Profile(10*i + 10, 10);\r\n            dao.addProfile(p);\r\n            correctLeaderboard.add(p);\r\n        }\r\n        ArrayList<Profile> leaderboard = dao.getLeaderboard();\r\n        assertEquals(leaderboard.size(), 10);\r\n        assertEquals(leaderboard.get(0).getAverage_score(), 110);\r\n        assertEquals(dao.getLeaderboard(), correctLeaderboard);\r\n        dao.close();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/data_access/MongoDBDataAccessObjectTest.java b/test/data_access/MongoDBDataAccessObjectTest.java
--- a/test/data_access/MongoDBDataAccessObjectTest.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/test/data_access/MongoDBDataAccessObjectTest.java	(date 1701403818455)
@@ -7,6 +7,7 @@
 
 import java.lang.reflect.Array;
 import java.util.ArrayList;
+import java.util.Arrays;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -27,21 +28,49 @@
 
     @Test
     void generalTest() {
-        // Ensures that a) profiles are inserted, b) returned leaderboard is sorted and smaller than 10
+        /* Ensures that
+        * a) profiles are inserted
+        * b) profiles are updated
+        * c) returned leaderboard is sorted
+        * d) returned leaderboard is at most of length 10
+        * e) uninserted profiles don't exist
+         */
         MongoDBDataAccessObject dao = new MongoDBDataAccessObject(
                 "mongodb://localhost:27017",
                 "atlas-adventures-leaderbaord",
                 "test-leaderboard");
-        dao.addProfile(new Profile(6, 10));
-        dao.addProfile(new Profile(2, 13));
+
+        Profile p1 = new Profile(70,6, 10);
+        Profile p2 = new Profile(80,2, 13);
+        dao.addProfile(p1);
+        dao.addProfile(p2);
         assertEquals(dao.getLeaderboard().size(), 2);
+        assertTrue(dao.uidExists(70));
+        assertFalse(dao.uidExists(10));
+
+        p1.setGames_played(15);
+        p2.setAverage_score(9);
+        ArrayList<Profile> updated_leaderboard = new ArrayList<>(Arrays.asList(p2, p1));
+
+        ArrayList<Profile> initial_leaderboard = dao.getLeaderboard();
+        assertNotSame(dao.getLeaderboard(), updated_leaderboard);
+
+        dao.updateProfile(p1);
+        dao.updateProfile(p2);
+
+        assertTrue(dao.uidExists(70));
+
+        ArrayList<Profile> new_leaderboard = dao.getLeaderboard();
+        assertEquals(new_leaderboard, updated_leaderboard);
+
         ArrayList<Profile> correctLeaderboard = new ArrayList<>();
         for (int i=10; i > 0; i--) {
-            Profile p = new Profile(10*i + 10, 10);
+            Profile p = new Profile(i+2,10*i + 10, 10);
             dao.addProfile(p);
             correctLeaderboard.add(p);
         }
         ArrayList<Profile> leaderboard = dao.getLeaderboard();
+        assertTrue(dao.uidExists(10));
         assertEquals(leaderboard.size(), 10);
         assertEquals(leaderboard.get(0).getAverage_score(), 110);
         assertEquals(dao.getLeaderboard(), correctLeaderboard);
Index: test/use_case/leaderboard/LeaderboardInteractorTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.leaderboard;\r\n\r\nimport entity.Profile;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class LeaderboardInteractorTest {\r\n    @Test\r\n    void successTest() {\r\n        LeaderboardDataAccessInterface leaderboardDAO = new TestLeaderboardDAO();\r\n\r\n        // This creates a successPresenter that tests whether the test case is as we expect.\r\n        LeaderboardOutputBoundary successPresenter = new LeaderboardOutputBoundary() {\r\n            @Override\r\n            public void prepareSuccessView(ArrayList<Profile> leaderboard) {\r\n                // 2 things to check: the output data is correct, and the user has been created in the DAO.\r\n                Profile p1 = new Profile(1, 1);\r\n                Profile p2 = new Profile(2, 4);\r\n                Profile p3 = new Profile(10, 30);\r\n                ArrayList<Profile> correctLeaderboard = new ArrayList<>(Arrays.asList(p3, p2, p1));\r\n                assertEquals(leaderboard, correctLeaderboard);\r\n            }\r\n\r\n            @Override\r\n            public void prepareFailView() {\r\n                fail(\"Use case failure is unexpected.\");\r\n            }\r\n        };\r\n\r\n        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(successPresenter, leaderboardDAO);\r\n        leaderboardInteractor.execute();\r\n    }\r\n\r\n    @Test\r\n    void noLeaderboardTest() {\r\n        LeaderboardDataAccessInterface leaderboardDAO = new TestLeaderboardDAO();\r\n\r\n        // This creates a presenter that tests whether the test case is as we expect.\r\n        LeaderboardOutputBoundary failurePresenter = new LeaderboardOutputBoundary() {\r\n            @Override\r\n            public void prepareSuccessView(ArrayList<Profile> leaderboard) {\r\n                fail(\"Use case success is unexpected.\");\r\n            }\r\n\r\n            @Override\r\n            public void prepareFailView() {\r\n                assertTrue(leaderboardDAO.getLeaderboard().isEmpty());\r\n            }\r\n        };\r\n\r\n        LeaderboardInputBoundary interactor = new LeaderboardInteractor(failurePresenter, leaderboardDAO);\r\n        interactor.execute();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/use_case/leaderboard/LeaderboardInteractorTest.java b/test/use_case/leaderboard/LeaderboardInteractorTest.java
--- a/test/use_case/leaderboard/LeaderboardInteractorTest.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/test/use_case/leaderboard/LeaderboardInteractorTest.java	(date 1701403818466)
@@ -2,7 +2,9 @@
 
 import entity.Profile;
 import org.junit.jupiter.api.Test;
+import use_case.profile.ProfileDataAccessInterface;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 
@@ -12,6 +14,7 @@
     @Test
     void successTest() {
         LeaderboardDataAccessInterface leaderboardDAO = new TestLeaderboardDAO();
+        ProfileDataAccessInterface profileDAO = new TestProfileDAO();
 
         // This creates a successPresenter that tests whether the test case is as we expect.
         LeaderboardOutputBoundary successPresenter = new LeaderboardOutputBoundary() {
@@ -31,13 +34,14 @@
             }
         };
 
-        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(successPresenter, leaderboardDAO);
+        LeaderboardInputBoundary leaderboardInteractor = new LeaderboardInteractor(successPresenter, leaderboardDAO, profileDAO);
         leaderboardInteractor.execute();
     }
 
     @Test
     void noLeaderboardTest() {
         LeaderboardDataAccessInterface leaderboardDAO = new TestLeaderboardDAO();
+        ProfileDataAccessInterface profileDAO = new TestProfileDAO();
 
         // This creates a presenter that tests whether the test case is as we expect.
         LeaderboardOutputBoundary failurePresenter = new LeaderboardOutputBoundary() {
@@ -52,7 +56,40 @@
             }
         };
 
-        LeaderboardInputBoundary interactor = new LeaderboardInteractor(failurePresenter, leaderboardDAO);
+        LeaderboardInputBoundary interactor = new LeaderboardInteractor(failurePresenter, leaderboardDAO, profileDAO);
         interactor.execute();
     }
+
+    private class TestProfileDAO implements ProfileDataAccessInterface {
+
+        @Override
+        public void setGamesPlayed(int gamesPlayed) {
+
+        }
+
+        @Override
+        public void setAverageScore(Double score) {
+
+        }
+
+        @Override
+        public int getGamesPlayed() {
+            return 10;
+        }
+
+        @Override
+        public Double getAverageScore() {
+            return 10.0;
+        }
+
+        @Override
+        public int getUid() {
+            return 0;
+        }
+
+        @Override
+        public void update() throws IOException {
+
+        }
+    }
 }
Index: test/use_case/leaderboard/TestLeaderboardDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package use_case.leaderboard;\r\n\r\nimport entity.Profile;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\n\r\npublic class TestLeaderboardDAO implements LeaderboardDataAccessInterface{\r\n    private ArrayList<Profile> leaderboard;\r\n    private Comparator<Profile> profileComparator;\r\n    public TestLeaderboardDAO() {\r\n        Profile p1 = new Profile(1, 1);\r\n        Profile p2 = new Profile(2, 4);\r\n        Profile p3 = new Profile(10, 30);\r\n        this.leaderboard = new ArrayList<Profile>(Arrays.asList(p1, p2, p3));\r\n        this.profileComparator = new Comparator<Profile>() {\r\n            @Override\r\n            public int compare(Profile p1, Profile p2) {\r\n                if(p1.getAverage_score() < p2.getAverage_score()) {\r\n                    return 1;\r\n                } else if (p1.getAverage_score() > p2.getAverage_score()) {\r\n                    return -1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n        };\r\n        this.leaderboard.sort(this.profileComparator);\r\n    }\r\n\r\n\r\n    @Override\r\n    public ArrayList<Profile> getLeaderboard() {\r\n        return leaderboard;\r\n    }\r\n\r\n    @Override\r\n    public void addProfile(Profile profile) {\r\n        leaderboard.add(profile);\r\n        leaderboard.sort(profileComparator);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/use_case/leaderboard/TestLeaderboardDAO.java b/test/use_case/leaderboard/TestLeaderboardDAO.java
--- a/test/use_case/leaderboard/TestLeaderboardDAO.java	(revision dbb91040d6a9c1fa587cf11220aea8a50e72d6d6)
+++ b/test/use_case/leaderboard/TestLeaderboardDAO.java	(date 1701403818475)
@@ -10,9 +10,9 @@
     private ArrayList<Profile> leaderboard;
     private Comparator<Profile> profileComparator;
     public TestLeaderboardDAO() {
-        Profile p1 = new Profile(1, 1);
-        Profile p2 = new Profile(2, 4);
-        Profile p3 = new Profile(10, 30);
+        Profile p1 = new Profile(1,1, 1);
+        Profile p2 = new Profile(2,2, 4);
+        Profile p3 = new Profile(3,10, 30);
         this.leaderboard = new ArrayList<Profile>(Arrays.asList(p1, p2, p3));
         this.profileComparator = new Comparator<Profile>() {
             @Override
@@ -35,6 +35,22 @@
         return leaderboard;
     }
 
+    @Override
+    public boolean uidExists(int uid) {
+        return uid == 1 || uid == 2 || uid == 3;
+    }
+
+    @Override
+    public void updateProfile(Profile profile) {
+        int uid = profile.getUid();
+        for (Profile p : leaderboard) {
+            if (p.getUid() == uid) {
+                p.setAverage_score(profile.getAverage_score());
+                p.setGames_played(profile.getGames_played());
+            }
+        }
+    }
+
     @Override
     public void addProfile(Profile profile) {
         leaderboard.add(profile);
